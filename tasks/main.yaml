---
- name: Load OS-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - ../vars/{{ ansible_os_family }}.yml
    - ../vars/{{ ansible_distribution_release }}.yml
    - ../vars/empty.yml
  tags: 
    - always

- name: Create zookeeper group
  group:
    name: '{{ zookeeper_group }}'
    state: present
  when: zookeeper_create_user_group | bool
  tags:
    - zookeeper_group

- name: Create zookeeper user
  user:
    name: '{{ zookeeper_user }}'
    group: '{{ zookeeper_group }}'
    state: present
    createhome: no
  when: zookeeper_create_user_group | bool
  tags:
    - zookeeper_user

- name: Check if ZooKeeper has already been downloaded and unpacked
  stat:
    path: '{{ zookeeper_install_dir }}'
  register: dir

- name: Download Apache ZooKeeper
  get_url:
    url: '{{ zookeeper_mirror }}/zookeeper-{{ zookeeper_version }}/{{ zookeeper_package }}'
    dest: /tmp
  when: not dir.stat.exists
  tags:
    - zookeeper_download

- name: Create ZooKeeper installation dir {{ zookeeper_install_dir }}
  file:
    path: '{{ zookeeper_install_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  when: not dir.stat.exists
  tags:
    - zookeeper_dirs

- name: Unpack Apache ZooKeeper
  unarchive:
    src: /tmp/{{ zookeeper_package }}
    dest: '{{ zookeeper_install_dir }}'
    copy: no
    extra_opts: [--strip-components=1]
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  when: not dir.stat.exists
  tags:
    - zookeeper_unpack

- name: Create symlink to ZooKeeper installation
  file:
    src: '{{ zookeeper_install_dir }}'
    dest: '{{ zookeeper_dir }}'
    state: link
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create directory for snapshot files and myid file
  file:
    path: '{{ zookeeper_data_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create directory for transaction log files
  file:
    path: '{{ zookeeper_data_log_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

- name: Create zookeeper log directory
  file:
    path: '{{ zookeeper_log_dir }}'
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_dirs

# /usr/share/zookeeper/conf/zoo.cfg is the default file ZooKeeper will use when starting
- name: Template configuration file to zoo.cfg
  template:
    src: zoo.cfg.j2
    dest: '{{ zookeeper_dir }}/conf/zoo.cfg'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Create directory for symlink to ZooKeeper configuration file
  file:
    path: /etc/zookeeper
    state: directory
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_config

- name: Create symlink to ZooKeeper configuration file
  file:
    src: '{{ zookeeper_dir }}/conf/zoo.cfg'
    dest: /etc/zookeeper/zoo.cfg
    state: link
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  tags:
    - zookeeper_config

- name: Template myid to {{ zookeeper_data_dir }}/myid
  template:
    src: myid.j2
    dest: '{{ zookeeper_data_dir }}/myid'
    group: '{{ zookeeper_group }}'
    owner: '{{ zookeeper_user }}'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Template /etc/default
  template:
    src: default.j2
    dest: '/etc/default/zookeeper'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

# Uncomment the log4j.properties line for setting the maximum number of logs to rollover and keep
- name: Set maximum log rollover history
  replace:
    dest: '{{ zookeeper_dir }}/conf/log4j.properties'
    regexp: '^#log4j.appender.ROLLINGFILE.MaxBackupIndex'
    replace: 'log4j.appender.ROLLINGFILE.MaxBackupIndex'
  notify:
    - Restart ZooKeeper service
  tags:
    - zookeeper_config

- name: Template ZooKeeper systemd service file
  template:
    src: zookeeper.service.j2
    dest: "{{ zookeeper_unit_path }}"
  tags:
    - zookeeper_service

- name: Populate service facts
  ansible.builtin.service_facts:
  tags:
    - zookeeper_service

- name: Debug service state
  debug:
    msg:
      "Zookeeper service state": "{{ ansible_facts.services['zookeeper.service'].state }}"
  tags:
    - zookeeper_service

- name: Start the ZooKeeper service
  systemd:
    name: zookeeper.service
    state: started
    enabled: yes
  when: zookeeper_start and ansible_facts.services['zookeeper.service'].state in ['stopped', 'inactive']
  tags:
    - zookeeper_service

# Cleanup install by deleting downloaded ZooKeeper archive
- name: Delete /tmp/{{ zookeeper_package }} file
  file:
    path: /tmp/{{ zookeeper_package }}
    state: absent
  tags:
    - zookeeper_cleanup

# Set Ansible fact that ZooKeeper has completed installation. This is so that this role can be used in
# other dependent roles. Those roles can check for this fact to determine whether or not this role
# should be run. Failing to do so will mean that this role is executed even if it has already been run.
- name: Set fact zookeeper_installed
  set_fact:
    zookeeper_installed: true
  tags:
    - zookeeper_install_fact
